{% extends 'base.html.twig' %}

{% block title %}Hello HomepageController!{% endblock %}

{% block body %}

<div class="container mx-auto">
    <h1 class="text-2xl font-bold mb-4 flex justify-center">Homepage</h1>
    <!-- Aggiungi il campo di input per la ricerca -->
    <input type="text" id="searchInput" placeholder="Cerca per titolo" onkeypress="handleKeyPress(event)">

    <!-- Aggiungi il pulsante per avviare la ricerca -->
    <button class="mr-4 bg-blue-500 text-white px-4 py-2 rounded" onclick="searchPosts()">Cerca</button>
    
    <a href="{{ path('random_images') }}" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Mostra 10 post Random</a>

    <div class="flex mt-4">
        <button id="toggleButton" onclick="toggleViews()" class="mr-4 bg-blue-500 text-white px-4 py-2 rounded">Toggle
            View</button>
        <div class="flex">
            <button onclick="sortPosts('title', 'desc')" class="mr-2 bg-green-500 text-white px-4 py-2 rounded">Ordina
                Titolo A-Z</button>
            <button id="sortButton" onclick="sortPosts('title', 'asc')"
                class="mr-2 bg-green-500 text-white px-4 py-2 rounded">Ordina Titolo Z-A</button>
            <button onclick="sortPosts('date', 'desc')" class="mr-2 bg-green-500 text-white px-4 py-2 rounded">Ordina
                Data Recente</button>
            <button onclick="sortPosts('date', 'asc')" class="bg-green-500 text-white px-4 py-2 rounded">Ordina Data
                Vecchia</button>
        </div>
    </div>

    <div id="tableView" {% if viewMode=='table' %}style="display: block;" {% else %}style="display: none;" {% endif %}>
        <h2 class="text-xl font-bold mb-2 mt-2">Table View</h2>
        <table class="table-auto w-full">
            <thead>
                <tr>
                    <th class="px-4 py-2">Title</th>
                    <th class="px-4 py-2">Image</th>
                    <th class="px-4 py-2">Date</th>
                    <th class="px-4 py-2">Azioni</th>
                </tr>
            </thead>
            <tbody id="table">
                {% for post in posts %}
                <tr class="post-{{ post.id }}">
                    <td class="border px-4 py-2">{{ post.title }}</td>
                    <td class="border px-4 py-2"><img src="{{ post.image }}" alt="Image"></td>
                    <td class="border px-4 py-2">{{ post.date|date('d/m/Y') }}</td>
                    <td class="border px-4 py-2 "><button
                            class=" bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                            onclick="excludePost('{{ post.id }}')">Nascondi</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <div id="gridView" {% if viewMode=='grid' %}style="display: block;" {% else %}style="display: none;" {% endif %}
        class="hidden">
        <h2 class="text-xl font-bold mb-2 mt-2">Grid View</h2>
        <div id="grid" class="grid grid-cols-3 gap-4">
            {% for post in posts %}
            <div class="border p-4 post-{{ post.id }}" >
                <img src="{{ post.image }}" alt="Image" class="mb-2">
                <h5 class="text-lg font-bold mb-2">{{ post.title }}</h5>
                <p class="text-gray-600">{{ post.date|date('d/m/Y') }}</p>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                    onclick="excludePost('{{ post.id }}')">Nascondi</button>
            </div>
            {% endfor %}
        </div>
    </div>

    {# Visualizza la paginazione #}
    <div class="pagination justify-center flex">
        {{ knp_pagination_render(posts) }}
    </div>
</div>

<script>
    // STEP 4 Nella homepage l’utente avrà la possibilità di visualizzare le immagini come lista (tabella) in cui ogni riga ha: titolo, immagine, data oppure come una griglia di “card” in cui ogni card avrà immagine, titolo e data. Sarà quindi necessario un pulsante per passare dalla visualizzazione tabellare a griglia e viceversa

    function toggleViews() {
        let tableView = document.getElementById('tableView');
        let gridView = document.getElementById('gridView');

        if (tableView.style.display === 'none') {
            tableView.style.display = 'block';
            gridView.style.display = 'none';
            // Aggiorna il parametro nell'URL o lato server per salvare lo stato della vista
            history.pushState({}, null, "?view=table");
        } else {
            tableView.style.display = 'none';
            gridView.style.display = 'block';
            // Aggiorna il parametro nell'URL o lato server per salvare lo stato della vista
            history.pushState({}, null, "?view=grid");
        }
    }

    //STEP 7 L’utente ha un pulsante per escludere una o più immagini. Se ad esempio esclude la prima, quando ricarica la pagina quell’immagine deve essere esclusa. Se l’utente fa il refresh della pagina, il sito deve mantenere escluse le immagini che l’utente aveva escluso

    // Funzione per ottenere l'elenco delle post escluse dalla memoria locale
    function getExcludedPosts() {
        const excludedPosts = localStorage.getItem('excludedPosts');
        return excludedPosts ? JSON.parse(excludedPosts) : [];
    }

    // Funzione per salvare l'elenco delle post escluse nella memoria locale
    function saveExcludedPosts(excludedPosts) {
        localStorage.setItem('excludedPosts', JSON.stringify(excludedPosts));
    }

    // Funzione per gestire il clic del pulsante di esclusione di post
    function excludePost(postId) {

        const excludedPosts = getExcludedPosts();

        // Aggiungi l'ID post all'elenco delle post escluse se non è già presente
        if (!excludedPosts.includes(postId)) {
            excludedPosts.push(postId);
            saveExcludedPosts(excludedPosts);
        }

        // Esegui l'aggiornamento visuale o altre azioni necessarie
        updateView();
    }

    // Funzione per controllare e aggiornare la visualizzazione delle post escluse
    function updateView() {
        const excludedPosts = getExcludedPosts();

        // Implementa la logica per escludere visivamente le post in base all'elenco delle post escluse
        excludedPosts.forEach(postId => {
            const postElements = document.getElementsByClassName(`post-${postId}`);
            // Itera sugli elementi con la stessa classe
            if(postElements){
                Array.from(postElements).forEach(postElement => {
                    postElement.style.display = 'none';
                });
            }
        });
    }

    // Esegui l'aggiornamento visuale al caricamento della pagina
    document.addEventListener("DOMContentLoaded", function () {
        updateView();
    });

    // STEP 9 Implementare una ricerca per sito che mostra solamente le immagini che nel titolo hanno la/le parola/e inserite o anche una parte di esse (se ho un’immagine con il titolo “gatti” e cerco “gatt”, l’immagine mi viene restituita tra i risultati.

    function handleKeyPress(event) {
        if (event.key === 'Enter') {
            searchPosts();
        }
    }

    function searchPosts() {
        // Ottieni il valore dal campo di input
        let searchTerm = document.getElementById('searchInput').value;

        // Costruisci l'URL con il parametro di ricerca
        let currentUrl = window.location.href;
        let separator = currentUrl.includes('?') ? '&' : '?';
        let newUrl = currentUrl + separator + 'search=' + searchTerm;

        // Aggiorna l'URL per includere il parametro di ricerca
        window.location.href = newUrl;
    }

    //STEP 6 Prevedere un pulsante che cambia l’ordine delle immagini visualizzate; l’ordinamento deve essere per titolo e data; ogni volta che l’utente preme il pulsante le immagini vengono ordinate per titolo  dalla A alla Z, titolo dalla Z alla A, per data dalla più recente in poi, data dalla meno recente in poi). Non deve essere fatta la chiamata al server, l’ordinamento rimane sulle immagini già mostrate nella pagina

    // Dichiarazione di una variabile per tenere traccia dell'ordine corrente
    let currentSortOrder = 'asc';

    // Funzione per cambiare l'ordine al clic del pulsante
    function toggleSorting() {
        // Cambia l'ordine corrente tra 'asc' e 'desc'
        currentSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';

        // Chiamata alla funzione di ordinamento in base all'ordine corrente
        if (currentSortOrder === 'asc') {
            sortPosts('title', 'asc');
        } else {
            sortPosts('title', 'desc');
        }
    }

    // Funzione per ordinare le post lato client
    function sortPosts(field, order) {
    // Recupera l'array delle post dal tuo template
    let newArrayPost = JSON.parse('{{ postsData | raw }}');

    // Ordina l'array in base al campo e all'ordine specificati
    newArrayPost.sort(function (a, b) {
        let aValue = a[field];
        let bValue = b[field];

        if (order === 'desc') {
            return aValue.localeCompare(bValue);
        } else {
            return bValue.localeCompare(aValue);
        }
    });

    // Aggiorna la visualizzazione delle post per entrambe le viste
    updateVisuals(newArrayPost, 'table');
    updateVisuals(newArrayPost, 'grid');
}

// Funzione per aggiornare la visualizzazione delle post
function updateVisuals(newArrayPost, viewContainerId) {
    // Seleziona il contenitore delle post nel DOM
    let postsContainer = document.getElementById(viewContainerId);

    // Verifica che newArrayPost sia definito
    if (newArrayPost) {
        // Rimuovi tutte le post attualmente presenti nel contenitore
        while (postsContainer.firstChild) {
            postsContainer.removeChild(postsContainer.firstChild);
        }

        // Itera sull'array ordinato e crea nuovi elementi post nel DOM
        newArrayPost.forEach(post => {
            let postElement = createPostElement(post, viewContainerId);
            postsContainer.appendChild(postElement);
        });
    }
}

// Funzione per creare un elemento post nel DOM
function createPostElement(post, viewMode) {
    // Crea un elemento <tr> o <div> a seconda del tuo layout
    let postElement;
    
    if (viewMode === 'table') {
        postElement = document.createElement('tr');
        postElement.className = `border p-4 post-${post.id}`;
    } else if (viewMode === 'grid') {
        postElement = document.createElement('div');
        postElement.className = `post-${post.id}`;
    }

    // Aggiungi il contenuto dell'elemento post
    if (viewMode === 'table') {
        postElement.innerHTML = `
            <td class="border px-4 py-2">${post.title}</td>
            <td class="border px-4 py-2"><img src="${post.image}" alt="Image"></td>
            <td class="border px-4 py-2">${formatDate(post.date)}</td>
            <td class="border px-4 py-2">
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                    onclick="excludePost('${post.id}')">Nascondi</button>
            </td>                
        `;
    } else if (viewMode === 'grid') {
        postElement.innerHTML = `
            <img src="${post.image}" alt="Image" class="mb-2">
            <h5 class="text-lg font-bold mb-2">${post.title}</h5>
            <p class="text-gray-600">${formatDate(post.date)}</p>
            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                onclick="excludeImage('${post.id}')">Nascondi</button>
        `;
    }

    return postElement;
}

// Funzione di formattazione della data personalizzata
function formatDate(dateString) {
    const options = { day: '2-digit', month: '2-digit', year: 'numeric' };
    const formattedDate = new Date(dateString).toLocaleDateString(undefined, options);
    return formattedDate;
}

</script>


{% endblock %}